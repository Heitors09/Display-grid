*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background: #7159c1;
}

/*iniciar o display grid no pai*/
.container{
  display: grid;
  /*fatia de acordo com a lógica, primeiro as colunas em fr(flex) seriam frações*/
  grid-template-columns: 3fr 1fr;
  /*define quantas frações da tela pegar e que são duas colunas de 3 e 1 fr*/
  grid-template-rows: 20vh 70vh 10vh;
  /*agora as linhas e que são 3 de 20,70,10 viewheights, a altura que eu vejo(vh)*/
  /*espaço entre as grids pode tanto ser grid-row-gap ou grid-column-gap*/
  grid-template-areas:  "h  h"
                        "m  a"
                        "f  f";
                        /*grid column and row- start e end de maneira simplificada peloa area
                        organizando os elementos como no html por colunas e linhas */
}

/*quero que meu header fique em cima*/
header{
    background: yellow;
    height: 100px;
    /*quero que meu head pegue toda a área de cima apesar de existirem duas colunas*/
    /* grid-column-start:1 ;
    grid-column-end:3; */
    /* grid-column: 1/3; */
    /*começa na linha um, passa a divisão (2) entre a primeira e ultima linha e termina na 3*/
    /*mesma lógica se aplica para as rows*/
    grid-area: h;
}
/*que o meu main fique no meio*/
main{
    background: blue;
    height: 100px;
    /* grid-column-start: 1;
    grid-column-end: 2; */
    /* grid-column:1/2; */
    grid-area: m;
}
/*meu aside na esquerda*/
aside{
    background: green;
    height: 100px;
    /* grid-column-start: 2;
    grid-column-end: 3; */
    /* grid-column:2/3; */
    grid-area: a;
}
/*e meu footer embaixo*/
footer{
    background: red;
    height: 100px; 
    /* grid-column-start:1 ;
    grid-column-end:3; */
    /* grid-column:1/3; */
    grid-area: f;
}